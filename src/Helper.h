#pragma once

static String formatString(double number, const String &format){
  char buf[10];
  snprintf(buf, sizeof(buf), format.c_str(), number);
  return String(buf);
}

static int mod(int a, int b) {
  while(a < 0){
    a = a + b;
  }
  return a % b;
}

static int count_digit(int number) {
   int count = 0;
   while(number != 0) {
      number = number / 10;
      count++;
   }
   if (count == 0){
    count = 1;
   }
   return count;
}

#define radioactive_sign_width 64
#define radioactive_sign_height 64
static uint8_t radioactive_sign_bits[] = {
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x80,0x01,0x00,0x00,0x00,0x03,0x00,0x00,0xc0,0x03,0x00,
  0x00,0x80,0x07,0x00,0x00,0xf0,0x03,0x00,0x00,0x80,0x1f,0x00,0x00,0xf8,0x07,
  0x00,0x00,0xc0,0x3f,0x00,0x00,0xfc,0x0f,0x00,0x00,0xe0,0x7f,0x00,0x00,0xfe,
  0x0f,0x00,0x00,0xe0,0xff,0x00,0x00,0xfe,0x1f,0x00,0x00,0xf0,0xff,0x00,0x00,
  0xff,0x1f,0x00,0x00,0xf0,0xff,0x01,0x80,0xff,0x3f,0x00,0x00,0xf8,0xff,0x03,
  0x80,0xff,0x7f,0x00,0x00,0xfc,0xff,0x03,0xc0,0xff,0x7f,0x00,0x00,0xfc,0xff,
  0x07,0xe0,0xff,0xff,0x00,0x00,0xfe,0xff,0x0f,0xe0,0xff,0xff,0x01,0x00,0xff,
  0xff,0x0f,0xf0,0xff,0xff,0x01,0x00,0xff,0xff,0x1f,0xf0,0xff,0xff,0x03,0x80,
  0xff,0xff,0x1f,0xf0,0xff,0xff,0x07,0xc0,0xff,0xff,0x1f,0xf8,0xff,0xff,0x07,
  0xc0,0xff,0xff,0x3f,0xf8,0xff,0xff,0x0f,0xe0,0xff,0xff,0x3f,0xf8,0xff,0xff,
  0x1f,0xf0,0xff,0xff,0x3f,0xf8,0xff,0xff,0x07,0xc0,0xff,0xff,0x3f,0xfc,0xff,
  0xff,0x83,0x83,0xff,0xff,0x7f,0xfc,0xff,0xff,0xe3,0x8f,0xff,0xff,0x7f,0xfc,
  0xff,0xff,0xf1,0x1f,0xff,0xff,0x7f,0xfc,0xff,0xff,0xf1,0x1f,0xff,0xff,0x7f,
  0xfc,0xff,0xff,0xf9,0x3f,0xff,0xff,0x7f,0xfc,0xff,0xff,0xf9,0x3f,0xff,0xff,
  0x7f,0x00,0x00,0x00,0xf8,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x1f,0x00,
  0x00,0x00,0x00,0x00,0x00,0xf0,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x0f,
  0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x30,0x00,0x00,0x00,0x00,0x00,0x00,
  0xf8,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x7f,0x00,0x00,0x00,0x00,0x00,
  0x00,0xfc,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x00,0x00,0x00,0x00,
  0x00,0x00,0xff,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x01,0x00,0x00,
  0x00,0x00,0x80,0xff,0xff,0x03,0x00,0x00,0x00,0x00,0xc0,0xff,0xff,0x07,0x00,
  0x00,0x00,0x00,0xc0,0xff,0xff,0x07,0x00,0x00,0x00,0x00,0xe0,0xff,0xff,0x0f,
  0x00,0x00,0x00,0x00,0xf0,0xff,0xff,0x1f,0x00,0x00,0x00,0x00,0xf0,0xff,0xff,
  0x1f,0x00,0x00,0x00,0x00,0xf8,0xff,0xff,0x3f,0x00,0x00,0x00,0x00,0xf8,0xff,
  0xff,0x3f,0x00,0x00,0x00,0x00,0xfc,0xff,0xff,0x7f,0x00,0x00,0x00,0x00,0xfe,
  0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xfe,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
  0xff,0xff,0xff,0xff,0x01,0x00,0x00,0x00,0xfe,0xff,0xff,0xff,0x00,0x00,0x00,
  0x00,0xfc,0xff,0xff,0x7f,0x00,0x00,0x00,0x00,0xf0,0xff,0xff,0x1f,0x00,0x00,
  0x00,0x00,0x80,0xff,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0xf8,0x3f,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00
};
